// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: userPreferences.proto

package userPreferences

import (
	context "context"
	common "food/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserPreferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string       `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Food   *common.Food `protobuf:"bytes,2,opt,name=food,proto3" json:"food,omitempty"`
}

func (x *UserPreferencesRequest) Reset() {
	*x = UserPreferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userPreferences_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferencesRequest) ProtoMessage() {}

func (x *UserPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userPreferences_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferencesRequest.ProtoReflect.Descriptor instead.
func (*UserPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_userPreferences_proto_rawDescGZIP(), []int{0}
}

func (x *UserPreferencesRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *UserPreferencesRequest) GetFood() *common.Food {
	if x != nil {
		return x.Food
	}
	return nil
}

type UserPreferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Food *common.Food `protobuf:"bytes,1,opt,name=food,proto3" json:"food,omitempty"`
}

func (x *UserPreferencesResponse) Reset() {
	*x = UserPreferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userPreferences_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPreferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferencesResponse) ProtoMessage() {}

func (x *UserPreferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userPreferences_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferencesResponse.ProtoReflect.Descriptor instead.
func (*UserPreferencesResponse) Descriptor() ([]byte, []int) {
	return file_userPreferences_proto_rawDescGZIP(), []int{1}
}

func (x *UserPreferencesResponse) GetFood() *common.Food {
	if x != nil {
		return x.Food
	}
	return nil
}

var File_userPreferences_proto protoreflect.FileDescriptor

var file_userPreferences_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x6f,
	0x64, 0x52, 0x04, 0x66, 0x6f, 0x6f, 0x64, 0x32, 0x88, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x45, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x01, 0x5a, 0x14, 0x66, 0x6f, 0x6f, 0x64, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0xaa, 0x02, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_userPreferences_proto_rawDescOnce sync.Once
	file_userPreferences_proto_rawDescData = file_userPreferences_proto_rawDesc
)

func file_userPreferences_proto_rawDescGZIP() []byte {
	file_userPreferences_proto_rawDescOnce.Do(func() {
		file_userPreferences_proto_rawDescData = protoimpl.X.CompressGZIP(file_userPreferences_proto_rawDescData)
	})
	return file_userPreferences_proto_rawDescData
}

var file_userPreferences_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_userPreferences_proto_goTypes = []interface{}{
	(*UserPreferencesRequest)(nil),  // 0: userPreferences.UserPreferencesRequest
	(*UserPreferencesResponse)(nil), // 1: userPreferences.UserPreferencesResponse
	(*common.Food)(nil),             // 2: common.Food
}
var file_userPreferences_proto_depIdxs = []int32{
	2, // 0: userPreferences.UserPreferencesRequest.food:type_name -> common.Food
	2, // 1: userPreferences.UserPreferencesResponse.food:type_name -> common.Food
	0, // 2: userPreferences.UserPreferencesService.getShortlistedFoods:input_type -> userPreferences.UserPreferencesRequest
	1, // 3: userPreferences.UserPreferencesService.getShortlistedFoods:output_type -> userPreferences.UserPreferencesResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_userPreferences_proto_init() }
func file_userPreferences_proto_init() {
	if File_userPreferences_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userPreferences_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPreferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userPreferences_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPreferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userPreferences_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userPreferences_proto_goTypes,
		DependencyIndexes: file_userPreferences_proto_depIdxs,
		MessageInfos:      file_userPreferences_proto_msgTypes,
	}.Build()
	File_userPreferences_proto = out.File
	file_userPreferences_proto_rawDesc = nil
	file_userPreferences_proto_goTypes = nil
	file_userPreferences_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserPreferencesServiceClient is the client API for UserPreferencesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPreferencesServiceClient interface {
	GetShortlistedFoods(ctx context.Context, opts ...grpc.CallOption) (UserPreferencesService_GetShortlistedFoodsClient, error)
}

type userPreferencesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPreferencesServiceClient(cc grpc.ClientConnInterface) UserPreferencesServiceClient {
	return &userPreferencesServiceClient{cc}
}

func (c *userPreferencesServiceClient) GetShortlistedFoods(ctx context.Context, opts ...grpc.CallOption) (UserPreferencesService_GetShortlistedFoodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserPreferencesService_serviceDesc.Streams[0], "/userPreferences.UserPreferencesService/getShortlistedFoods", opts...)
	if err != nil {
		return nil, err
	}
	x := &userPreferencesServiceGetShortlistedFoodsClient{stream}
	return x, nil
}

type UserPreferencesService_GetShortlistedFoodsClient interface {
	Send(*UserPreferencesRequest) error
	Recv() (*UserPreferencesResponse, error)
	grpc.ClientStream
}

type userPreferencesServiceGetShortlistedFoodsClient struct {
	grpc.ClientStream
}

func (x *userPreferencesServiceGetShortlistedFoodsClient) Send(m *UserPreferencesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userPreferencesServiceGetShortlistedFoodsClient) Recv() (*UserPreferencesResponse, error) {
	m := new(UserPreferencesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserPreferencesServiceServer is the server API for UserPreferencesService service.
type UserPreferencesServiceServer interface {
	GetShortlistedFoods(UserPreferencesService_GetShortlistedFoodsServer) error
}

// UnimplementedUserPreferencesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserPreferencesServiceServer struct {
}

func (*UnimplementedUserPreferencesServiceServer) GetShortlistedFoods(UserPreferencesService_GetShortlistedFoodsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShortlistedFoods not implemented")
}

func RegisterUserPreferencesServiceServer(s *grpc.Server, srv UserPreferencesServiceServer) {
	s.RegisterService(&_UserPreferencesService_serviceDesc, srv)
}

func _UserPreferencesService_GetShortlistedFoods_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserPreferencesServiceServer).GetShortlistedFoods(&userPreferencesServiceGetShortlistedFoodsServer{stream})
}

type UserPreferencesService_GetShortlistedFoodsServer interface {
	Send(*UserPreferencesResponse) error
	Recv() (*UserPreferencesRequest, error)
	grpc.ServerStream
}

type userPreferencesServiceGetShortlistedFoodsServer struct {
	grpc.ServerStream
}

func (x *userPreferencesServiceGetShortlistedFoodsServer) Send(m *UserPreferencesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userPreferencesServiceGetShortlistedFoodsServer) Recv() (*UserPreferencesRequest, error) {
	m := new(UserPreferencesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserPreferencesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userPreferences.UserPreferencesService",
	HandlerType: (*UserPreferencesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getShortlistedFoods",
			Handler:       _UserPreferencesService_GetShortlistedFoods_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "userPreferences.proto",
}
